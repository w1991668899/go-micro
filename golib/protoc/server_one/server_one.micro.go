// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: go_micro/golib/protoc/server_one/server_one.proto

package pbserverone

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ServerOneService service

type ServerOneService interface {
	GetUser(ctx context.Context, in *GetUserByUserNameReq, opts ...client.CallOption) (*GetUserByUserNameResp, error)
}

type serverOneService struct {
	c    client.Client
	name string
}

func NewServerOneService(name string, c client.Client) ServerOneService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "pbserverone"
	}
	return &serverOneService{
		c:    c,
		name: name,
	}
}

func (c *serverOneService) GetUser(ctx context.Context, in *GetUserByUserNameReq, opts ...client.CallOption) (*GetUserByUserNameResp, error) {
	req := c.c.NewRequest(c.name, "ServerOneService.GetUser", in)
	out := new(GetUserByUserNameResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ServerOneService service

type ServerOneServiceHandler interface {
	GetUser(context.Context, *GetUserByUserNameReq, *GetUserByUserNameResp) error
}

func RegisterServerOneServiceHandler(s server.Server, hdlr ServerOneServiceHandler, opts ...server.HandlerOption) error {
	type serverOneService interface {
		GetUser(ctx context.Context, in *GetUserByUserNameReq, out *GetUserByUserNameResp) error
	}
	type ServerOneService struct {
		serverOneService
	}
	h := &serverOneServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ServerOneService{h}, opts...))
}

type serverOneServiceHandler struct {
	ServerOneServiceHandler
}

func (h *serverOneServiceHandler) GetUser(ctx context.Context, in *GetUserByUserNameReq, out *GetUserByUserNameResp) error {
	return h.ServerOneServiceHandler.GetUser(ctx, in, out)
}
